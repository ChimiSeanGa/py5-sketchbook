import py5
from colour import Color
import math
import cmath
from sympy import factorint, isprime
import random

# coeffs = [0, 1, -1, -1, 1, -2, 1, -1, -1, 1, 2, -1, -1, 2, 1, 2, 1, 6, -1, 0, -2, 1, 1, 0, 1, -1, -2, -1, -1, 2, -2, 4, -1, 1, -6, 2, 1, -2, 0, -2, 2, -2, -1, -4, -1, -2, 0, 0, -1, 1, 1, -6, 2, 6, 1, 2, 1, 0, -2, 4, 2, -14, -4, -1, 1, -4, -1, 8, 6, 0, -2, -1, -1, 14, 2, 1, 0, 1, 2, -12, -2, 1, 2, -12, 1, -12, 4, -2, 1, -18, 2, -2, 0, -4, 0, 0, 1, -2, -1, -1, -1]
# coeffs = [0, 1, 0, 0, -2, 0, 0, -1, 0, 0, 0, 0, 0, 5, 0, 0, 4, 0, 0, -7, 0, 0, 0, 0, 0, -5, 0, 0, 2, 0, 0, -4, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, -6, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -8, 0, 0, 5, 0, 0, 0, 0, 0, -7, 0, 0, 14, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, -19]

# 11.2.a.a
coeffs = [0, 1, -2, -1, 2, 1, 2, -2, 0, -2, -2, 1, -2, 4, 4, -1, -4, -2, 4, 0, 2, 2, -2, -1, 0, -4, -8, 5, -4, 0, 2, 7, 8, -1, 4, -2, -4, 3, 0, -4, 0, -8, -4, -6, 2, -2, 2, 8, 4, -3, 8, 2, 8, -6, -10, 1, 0, 0, 0, 5, -2, 12, -14, 4, -8, 4, 2, -7, -4, 1, 4, -3, 0, 4, -6, 4, 0, -2, 8, -10, -4, 1, 16, -6, 4, -2, 12, 0, 0, 15, 4, -8, -2, -7, -16, 0, -8, -7, 6, -2]

# 21.2.a.a
# coeffs = [0, 1, -1, 1, -1, -2, -1, -1, 3, 1, 2, 4, -1, -2, 1, -2, -1, -6, -1, 4, 2, -1, -4, 0, 3, -1, 2, 1, 1, -2, 2, 0, -5, 4, 6, 2, -1, 6, -4, -2, -6, 2, 1, -4, -4, -2, 0, 0, -1, 1, 1, -6, 2, 6, -1, -8, -3, 4, 2, 12, 2, -2, 0, -1, 7, 4, -4, 4, 6, 0, -2, 0, 3, -6, -6, -1, -4, -4, 2, -16, 2, 1, -2, -12, 1, 12, 4, -2, 12, -14, 2, 2, 0, 0, 0, -8, -5, 18, -1, 4, 1, 14, 6, 8, -6, 2, -6, 4, -1, -18, 8, 6, 1, -14, -4, 0, 2, -2, -12, 6, -6, 5, 2, 2, 0, 12, 1, 0, 3, -4, -4, 4, -4, -4, -4, -2, -18, -6, 0, 12, -2, 0, 0, -8, -1, 4, 6, 1, -6, 6, 1, 8, 12, -6, 4, 0, 2, -2, 16, 6, 10, 0, -1, 4, -2, -8, 12, -8, -3, -9, -12, 4, 4, -10, 2, 1, -4, 12, 14, -4, 2, -26, -2, -2, 0, -12, 0, -24, 0, -1, 8, -8, 7, 2, -18, 4, -1, 22, -4, 24, -3, 4, -14, 2, 6, -4, -8, 0, 2, 16, -2, 4, -6, 0, -4, 8, 3, 0, 18, -6, 8, 12, -6, 16, 5, -1, 14, -12, -4, -10, 0, -4, -6, -6, 2, 0, -12, -16, -6, 24, 2, 2, -5, 1, 2, -2, -2, -8, 0, -12, -12, -20, 1, 0, 0, 12, -17, 26, 4, -6, -4, -2, -4, 16, 12, -12, 4, -14, -4, 6, 2, 16, 6, 2, 6, -4, 0, 22, -12, 0, 6, -22, 0, -20, 0, -8, 8, -2, -5, 19, -4, 18, 6, 14, -1, -24, 18, 4, -6, 0, 1, 4, -8, 14, -4, 4, 6, 4, 4, 8, 0, -24, -6, 26, 2, 2, 16, -18, -6, -8, -14, 4, 0, -24, -1, 2, -4, -18, 6, 0, 8, -4, 12, 6, 8, -8, 1, -14, 9, -14, -12, 0, -4, -1, -12, 0, 10, -28, 2, -2, -1, -2, -20, 10, -12, 0, 14, 6, 4, 32, -6, -3, 26, 5, -2, 12, 2, 0, 0, 2, 12, -6, 0, -10, 24, 12, 0, 4, 1, 12, 8, 0, 8, 0, 3, 8, -2, -4, -18, 6, -4, 0, 3, 4, -22, 32, -4, -18, -24, -4, 1, -30, -4, 0, -14, -2, -2, 24, -18, -22, 4, -6, -8, -12, 0, 24, 10, 12, -16, -12, -2, 38, -4, 0, 18, 6, 0, 2, -4, -8, -8, -24, -1, -14, 0, 4, 18, 0, 6, -24, -24, 1, -12, 36, -6, 28, -16, 6, -7, -30, 1, 8, 14, 8, 12, -4, 12, 10, 10, -6, 0, -10, 4, 16, 2, 0, 6, 36, 2, -4, 0, -2, 36, -16, 16, -4, -6, 6, -24, -16, 10, -12, -2, 0, -5, -36, -1, -8, -6, 4, 2, 20, -2, 12, 8, -8, 0, 0, 12, 4, -12, -8, 20, 24, -3, -28, 0, -9, 0, -10, -12, 6, 11, 4, -26, -16, 4, 0, 6, -10, 12, 18, 2, -20, -4, 1, -16, 0, -4, -23, 12, 12, 4, -4, 14, -8, 12, -4, -6, 4, 2, -34, -16, -26, 30, 36, -2, 4, 6, -2, 4, -8, 0, 16, -22, -12, -12, -2, 0, 8, -2, -24, 22, 4, 0, 28, 20, -1, 0, 10, 8, -4, 8, -8, 2, 0, 7, 34, -19, 2, -4, 12, -18, 24, -18, 4, -14, 28, -1, 0, 24, 22, -6, -6, -4, -12, -6, 24, 0, 48, -3, -6, -4, 4, -8, -10, -14, -16, -20, 2, -4, 0, 6, -26, -4, -4, -12, -6, -8, -20, 0, 0, 24, 14, 2, -19, -26, 16, 2, -36, -2, -40, -48, 4, 18, 0, -6, -2, 8, 0, -6, 18, -4, 20, 0, 8, 24, -40, 3, 48, -2, 0, -4, -18, 18, -8, -2, -6, 0, 12, 8, 22, 4, 12, -36, 8, -6, 0, 8, 16, 8, -8, 5, 34, 14, -1, 9, -18, 14, -18, 36, -12, 0, -12, -4, 12, 1, -10, 4, -12, 0, 20, 10, -4, 28, -24, -6, -12, 2, -6, -1, 30, 2, 24, 28, 0, -10, -14, -12, 6, 0, -16, -42, 0, -6, 16, 4, 24, -32, -48, 2, -8, 3, 2, 26, 2, -5, -40, 6, 1, -12, 24, 2, -18, 0, -2, 0, 16, -2, 36, 12, -8, 6, 0, 0, -12, 10, -12, 24, -4, -12, -32, 0, -20, -4, -16, 1, -10, -12, 0, -24, 18, 0, 18, 8, 12, 0, -24, -17, 2, -8, 26, -2, 14, 4, 0, 54, -6, -6, 8, -4, 0, 0, -2, -1, 4, -4, -44, -22, 16, -32, 14, 12, 4, 18, -12, -24, -26, 4, 0, 5, -14, 30, -24, -4, 0, 0, 6, 42, 42, 2, 44, -2, 16, -24, -8, 6, -16, 22, 2, 4, 38, 6, 24, 24, -4, 12, -12, 0, 14, -24, 22, -14, -6, -12, 16, -16, 0, 12, -8, 6, -25, -38, -22, -4, 18, 0, -5, -6, -20, -6, 0, 0, -10, -2, -8, 12, -14, 8, 44, -8, -2, 24, -24, -5, 20, 14, 19, 0, -64, -4, -8, -54, 18, 0, -12, 6, 46, 24, 14, 8, -6, -1, -28, -12, -24, -36, 8, 18, 0, -28, 4, -16, 0, -6, 8, -3, 0, 30, 0, 1, -36, -8, 4, -42, 52, -8, -4, 12, 14, 4, -24, -4, -48, -10, 4, 10, -4, 6, 8, 0, 4, 10, 0, 4, -6, -16, 8, 10, 26, 0, 4, 6, -24, -36, 48, -6, 42, 4, 26, 0, 38, 2, 0, -12, 2, 16, 44, 16, 12, 4, -18, 18, 26, -6, 16, -24, -8, 16, 6, -14, -31, 12, 4, -2, -4, 0, 40, 15, -24, 36, 12, -1, -12, 8, 2, 2, -30, -4, -56, 2, -18, -20, 24, 6, -44, -12, 0, 8, 0, 8, -16, 0, -4, 0, -48, 12, -26, -4, 6, 36]

# 23.1.b.a
# coeffs = [0, 1, -1, -1, 0, 0, 1, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, -1, 1, 1, 1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, -1, -1, 1, 1, -1, 0, 0, 0, -1, 0, 0, 0, 1, 2, 0, 0, 1, 0, 1, 0, 0, 0, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, -1, 0, 0, -1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, -1, 0, 0, 2, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 1, 0, 1, 0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, -1, 0, 1, 1, 0, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, -1, 0, 0, -2, 0, -1, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, -1, 0, 0, 1, 0, -2, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, 2, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 1, -2, 0, 0, 0, 2, 0, 0, 0, -1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, -1, 0, 0, -1, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 2, 0, -1, 0, -1, 0, -1, 2, 0, 0, 0, 1, 0, 0, 1, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, -1, 0, 0, -2, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 0, -1, 0, -2, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 1, 0, 1, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, -1, -2, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 0, -1, -1, 1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1, 2, -1, -1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 1, 0, 0, -2, 0, 0, 0, 0, 0, 0, 1, 1, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, -2, -2, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 1, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, -2, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, -2, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 2, 0, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -2, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 2, 2, 0, -1, 0, -2, 0, 0, 0, 0, 1, 0, 0, 2, 0, -1, 0, 0, 0, 0, 0, 2, 0, 1, -1, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, -1, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 2, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -2, 1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 1, 1, 0, 0, -2, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -2, 0, 0, -1, 0, 1, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, -1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -1, 0, -2, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, 0, 1, 0, 0, 0, 0, -1, 1, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, 1, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 2, 0, -1, 1, 0, 0, 0, -1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, -1, -1, 0, 0, 0, 0, 2, -1, 0, 0, 0, -2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, -2, 0, 1, 0, 1, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 1, 0, 1, -1, 0, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, -2, 0, 0, -1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, -2, 1, 2, 0, 0, 0, 0, -2, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, -1, 0, -1, 0, 0, -1, 0, -1, 0, 0, 0, -2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 2, 0, 0, 0, 1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 2, 0, -1, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, -1, 1, 0, 0, 2, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -1, 0, -2, 0, -2, -1, 0, 0, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 1, -2, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, -2, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 1, 0, -2, 0, 0, 0, 0, -2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -1, 1, 0, 1, 0, 0, 1, 0, -1, 1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, -1, 0, -2, 0, 0, 0, -1, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, -1, 0, 0, -2, -1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, -1, 0, -1, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, -1, -1, 0, -1, 2, 0, 0, 0, 2, 0, 0, 0, -1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 2, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 1, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, -2, 0, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0]

# Convert mathematical coordinates to pixel coordinates at scale m
def coords_to_pixel(pt, m):
    return ((pt[0]+m)/(2*m)*py5.width, (m-pt[1])/(2*m)*py5.height)

# Get epicycle point at value z using n Fourier coefficients
def get_point(z, n=100):
    return sum([coeffs[i]*cmath.exp(2*cmath.pi*1j*i*z) for i in range(n)])

def get_point_coords(z, n=100):
    value = get_point(z, n)
    return (value.real, value.imag)

# Sample n points of the epicycle
# Offset t values by phase of p
def get_sample(n):
    return [get_point_coords(i/(n-1)) for i in range(n)]

# Act on the complex number z by the matrix with coefficients a, b, c, d
def modular_action(z, a, b, c, d):
    return (a*z + b)/(c*z + d)

# Return a sample of n complex points along a path given by the action
# of an element of the modular group, starting at z.
def modular_path(z, a, b, c, d, n):
    path = []
    for i in range(n):
        t = i/(n-1)
        at = (1-t) + t*a
        bt = t*b
        ct = t*c
        dt = (1-t) + t*d
        path.append(modular_action(z, at, bt, ct, dt))
    return path

# Return the modular factor of weight k.
def modular_factor(z, c, d, k):
    return (c*z+d)**k

# Sample n points of the epicycle with inputs coming from a modular path.
# If normalize is set to True, divide each output by (cz+d)^k.
def get_sample_from_path(z, a, b, c, d, n, normalize, k):
    path = modular_path(z, a, b, c, d, n)
    sample = []
    for i in range(n):
        t = i/(n-1)
        ct = t*c
        dt = (1-t) + t*d
        mfac = modular_factor(z, ct, dt, k)
        w = get_point(path[i])
        if normalize:
            w = w/mfac
        sample.append((w.real, w.imag))
    return sample

# Return the largest absolute value of the sample points
def largest_abs_value(sample):
    return max([math.dist(pt, (0,0)) for pt in sample])

# Given a prime power, calculate the Fourier coefficient using the
# eigenform recurrence relation (Diamond and Shurman p. 199).
# The weight k is 2 by default.
def calc_prime_power_coeff(coeffs, p, r, k=2):
    if len(coeffs) < p**(r-1):
        raise Exception("Error: coefficient list not long enough")
    if r == 1:
        return coeffs[p]
    else:
        return coeffs[p]*coeffs[p**(r-1)] - p**(k-1)*coeffs[p**(r-2)]

# Divide each prime index Fourier coefficient by the Hasse bound 2*sqrt(p).
# For each composite index Hasse bound, calculate the new coefficient by
# using the eigenform recurrence relation.
# The weight k is 2 by default.
def div_by_hasse_bound(coeffs, k=2):
    if coeffs[0] != 0 or coeffs[1] != 1:
        raise Exception("Error: not a a normalized eigenform\n")
    new_coeffs = [0 for i in range(len(coeffs))]
    new_coeffs[1] = 1
    for n in range(2, len(coeffs)):
        if isprime(n):
            new_coeffs[n] = coeffs[n]/(2*math.sqrt(n))
        else:
            factor_dict = factorint(n)
            factor_primes = factor_dict.keys()
            c = 1
            for p in factor_primes:
                r = factor_dict[p]
                c *= calc_prime_power_coeff(new_coeffs, p, r, k)
            new_coeffs[n] = c
    return new_coeffs

# Generate n random Fourier coefficients
def random_coeffs(n):
    return [random.randint(math.ceil(-2*math.sqrt(i)),
        math.floor(2*math.sqrt(i))) for i in range(n)]

# Draw epicycle using n sample points and initial complex point z
def draw_epicycle(n, z, normalize=False, k=2):
    sample = get_sample_from_path(z, 1, 1, 0, 1, n, normalize, k)
    m = largest_abs_value(sample) * 1.1
    pix_sample = [coords_to_pixel(pt, m) for pt in sample]
    py5.no_fill()
    # py5.begin_shape()
    # py5.curve_vertex(pix_sample[0][0], pix_sample[0][1])
    # for i in range(len(pix_sample)):
    #     py5.curve_vertex(pix_sample[i][0], pix_sample[i][1])
    # py5.curve_vertex(pix_sample[-1][0], pix_sample[-1][1])
    # py5.end_shape()

    for i in range(len(pix_sample)):
        c = Color(hue=(i*1.0/len(pix_sample)), saturation=1, luminance=0.5)
        py5.stroke(c.red*255, c.green*255, c.blue*255)
        pt = pix_sample[i]
        py5.circle(pt[0], pt[1], 2)

# coeffs = div_by_hasse_bound(coeffs)
# coeffs = random_coeffs(100)

def setup():
    py5.size(500, 500)
    py5.frame_rate(60)

    # print(get_point(1j/2))
    # print(get_point(modular_action(1j/2, 12, 1, 11, 1))/modular_factor(1j/2, 11, 1, 2))

def draw():
    py5.background(0)
    py5.stroke(255)
    draw_epicycle(10000, 1j*0.23, False, 2)

    if py5.frame_count == 1:
        py5.save_frame('modular_epicycle_cusp.png')

    # py5.save_frame('movie/modular_epicycle_11_2_a_a_movie_1_1_0_1___' + str(py5.frame_count).zfill(3) + '.png')

py5.run_sketch()
